/*******************************************************************************************
  SIMPL+ ModuleName Information
*******************************************************************************************/
/*
Dealer Name: Bose Corporation
System Name: ESP
Minimum Control Space Version required: 1.2
Programmer: AY / Sean Sauve
Rev: 1.1
*/

/*******************************************************************************************
  Compiler Directives
*******************************************************************************************/
#SYMBOL_NAME "Bose ESP Selector 2.1 SDS"
#HINT "Recalls and sets Parameters on a Selector block. Control Space V1.2 or higher needed "
#CATEGORY "46" "Bose Modules" // Custom
#DEFINE_CONSTANT NO_CMD 0
#DEFINE_CONSTANT SELECTOR 1

#DEFAULT_NONVOLATILE

#HELP_BEGIN
Inputs:
	GetSelector. Digital. Active High. 
		Retreives a Selector state. 
	SetSelector$. String. Change.
		Sets the state of a selector Module.
		Allowed Input Range is 1 to 999.
	ModuleName$. String. Change.
		Sets the name of the module.
	Rx$. Serial.
		Incoming Serial Signal from ESP.

Outputs:
    SelectorFB$. Serial.
		Reports back the state of a Selector Module.
	Tx$. Serial. 
		Outgoing Serial Signal from ESP.
#HELP_END

DIGITAL_INPUT GetSelector;
STRING_INPUT SetSelector$[3],ModuleName$[255];
BUFFER_INPUT Rx$[255]; 
   
STRING_OUTPUT SelectorFB$,Tx$;

INTEGER Operation,CommandToFindLen;
STRING CommandToFind$[255],InCommand$[255];
 
Function Get(Integer Index1)
{
	String Get$[255];
	
   	Makestring(Get$, "GA\"#%s\">%d\r",ModuleName$,Index1);
	Operation = NO_CMD;
	Tx$=Get$;
}

Function Set(Integer Index1, String Value$)
{
	String Set$[255];

	Makestring(Set$, "SA\"#%s\">%d=%s\r",ModuleName$,Index1,Value$);
	Operation = Index1;
	Tx$=Set$;
    Get(Index1);
}

//Gets
PUSH GetSelector
{
	    Get(SELECTOR);
}

//Sets   
CHANGE SetSelector$
{
	STRING Selector$[3];

	Selector$=SetSelector$;
    Set(SELECTOR,Selector$);
}

//Other
Change ModuleName$
{
	Makestring(CommandToFind$, "\"#%s\">%d=",ModuleName$,SELECTOR);
	CommandToFindLen = Len(CommandToFind$);
}

CHANGE Rx$
{	
	Integer CommandStart,CommandEnd,InCommandLength;
	String GetCommand$[255],Trash[255];
	String TempSelectorFB$[255];

	InCommand$=InCommand$+Rx$;
	ClearBuffer(Rx$);
	CommandStart = Find(CommandToFind$, InCommand$);
	CommandEnd = Find("\r", InCommand$);
	While (InCommand$<>"" && (CommandEnd>=1))
	{
		CommandStart = find(CommandToFind$, InCommand$);
		If((CommandStart > 0) && (CommandEnd >= (CommandStart+CommandToFindLen))) //Handles gets and asynchronos updates
		{
			TempSelectorFB$=Mid(InCommand$,CommandToFindLen+CommandStart,CommandEnd-(CommandToFindLen+CommandStart));
			If(TempSelectorFB$="10"){
				SelectorFB$="A";
			}Else If(TempSelectorFB$="11"){
				SelectorFB$="B";
 			}Else If(TempSelectorFB$="12"){
				SelectorFB$="C";
			}Else If(TempSelectorFB$="13"){
				SelectorFB$="D";
			}Else If(TempSelectorFB$="14"){
				SelectorFB$="E";
			}Else If(TempSelectorFB$="15"){
				SelectorFB$="F";
			}Else If(TempSelectorFB$="16"){
				SelectorFB$="G";
            }Else{
				SelectorFB$=TempSelectorFB$;
			}
		}

        //Remove the Command from the "buffer"
		InCommandLength=len(InCommand$);
		Trash=mid(InCommand$,1,CommandEnd);
		If(CommandEnd<InCommandLength){
			InCommand$=mid(InCommand$,CommandEnd+1,InCommandLength-CommandEnd);
		}Else{
        	InCommand$="";
		}
		
		CommandEnd = find("\r", InCommand$);	}
}

Function Main() //Clears Global Variables
{
	InCommand$="";
	CommandToFind$="";
	Operation = 0;
	CommandToFindLen = 0;
}
